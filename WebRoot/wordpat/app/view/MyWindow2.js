/*
 * File: app/view/MyWindow2.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyWindow2', {
    extend: 'Ext.window.Window',

    requires: [
        'Ext.panel.Panel',
        'Ext.form.field.ComboBox',
        'Ext.button.Button',
        'Ext.form.field.TextArea'
    ],

    height: 400,
    width: 460,
    resizable: false,
    title: '补充交互返回值',
    modal: true,
    y: 50,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    height: 368,
                    title: '',
                    items: [
                        {
                            xtype: 'combobox',
                            id: 'keys',
                            margin: '20px 0 0 20px',
                            width: 400,
                            fieldLabel: 'key',
                            labelWidth: 45,
                            queryMode: 'local',
                            store: 'keyStore',
                            valueField: 'id',
                            listeners: {
                                change: {
                                    fn: me.onKeysChange,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            id: 'wordclasses',
                            margin: '20px 0 0 20px',
                            width: 400,
                            fieldLabel: '词类',
                            labelWidth: 45,
                            editable: false,
                            queryMode: 'local',
                            store: 'wordclassStore',
                            valueField: 'id',
                            listeners: {
                                select: {
                                    fn: me.onWordclassesSelect,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            id: 'values',
                            margin: '20px 0 0 20px',
                            width: 400,
                            fieldLabel: 'value',
                            labelWidth: 45,
                            queryMode: 'local',
                            store: 'valueStore',
                            valueField: 'id'
                        },
                        {
                            xtype: 'button',
                            margin: '20px 0 0 200px',
                            width: 50,
                            text: '添加',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'textareafield',
                            height: 120,
                            id: 'preview',
                            margin: '20px 0 0 20px',
                            width: 400,
                            fieldLabel: '预览',
                            labelWidth: 45,
                            readOnly: true
                        },
                        {
                            xtype: 'button',
                            margin: '20px 0 0 200px',
                            width: 50,
                            text: '补充',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick1,
                                    scope: me
                                }
                            }
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onKeysChange: function(field, newValue, oldValue, eOpts) {
        var wordclasses = Ext.getCmp("wordclasses");
        var values = Ext.getCmp("values");

        var wordclassStore = wordclasses.getStore();
        wordclassStore.getProxy().extraParams = {action:'addreturnvalue_loadWordclasses',elementname:newValue};
        wordclasses.reset();
        wordclassStore.load();

        var valueStore = values.getStore();
        valueStore.getProxy().extraParams = {action:'addreturnvalue_loadValues',elementname:newValue};
        values.reset();
        valueStore.load();
    },

    onWordclassesSelect: function(combo, records, eOpts) {
        var values = Ext.getCmp("values");
        var valueStore = values.getStore();
        valueStore.getProxy().extraParams = {action:'addreturnvalue_loadValues',wordclassid:records[0].data.id};
        values.reset();
        valueStore.load();
    },

    onButtonClick: function(button, e, eOpts) {
        var key = Ext.getCmp("keys").getValue();
        var wordclass = Ext.getCmp("wordclasses").getRawValue();
        var value = Ext.getCmp("values").getValue();

        var preview = Ext.getCmp("preview");
        var c = preview.getValue();
        var a_c = c.split('\n');

        var keys = [];
        for(var index in a_c) {
            keys.push(a_c[index].split("=")[0]);
        }

        if(key&&key!=='') {
            if(value&&value!=='') {
                var temp2 = key + '=' + value;
                if(!exists(temp2)) {
                    //是否第一次添加
                    if(c==="") {
                        preview.setValue(c + temp2);
                    } else {
                        preview.setValue(c + "\n" + temp2);
                    }
                }
            } else {
                if(wordclass&&wordclass!=='') {
                    var temp1 = key + '=' + '<!'+ wordclass +'>';
                    //是否已存在
                    if(!exists(temp1)) {
                        //是否第一次添加
                        if(c==="") {
                            preview.setValue(c + temp1);
                        } else {
                            preview.setValue(c + "\n" + temp1);
                        }
                    }
                }
            }
        }

        function exists(temp) {
            var flag = false;

            for(var index1 in a_c) {
                if(a_c[index1]==temp) {
                    flag = true;
                }
            }

            var temp_key = temp.split("=")[0];
            var temp_value = temp.split("=")[1];
            var i = keys.indexOf(key);
            if(i!=-1) {
                //if(temp_value.indexOf("<!")==0&&temp_value.indexOf(">")==temp_value.length-1) {
                    c = "";
                    a_c[i] = temp;
                    for(var index2 in a_c) {
                        if(index2==0){
                            c += a_c[index2];
                        } else {
                            c += '\n' + a_c[index2];
                        }
                    }

                    preview.setValue(c);
                //}
                flag = true;
            }

            return flag;
        }
    },

    onButtonClick1: function(button, e, eOpts) {
        var c = Ext.getCmp("preview").getValue();
        if(c==="") return;

        var a_c = c.split("\n");
        var ct = '';
        for(var index in a_c) {
            if(index==0){
                ct += a_c[index];
            } else {
                ct += '&' + a_c[index];
            }
        }

        var o ;
        if(editstatus== "insert"){
            o=Ext.getCmp('textareaWordpat');
        }else{
            o= Ext.getCmp('textfieldWordpatEdit');
        }
        var content = o.getValue().replace(new RegExp(' ','g'),'');

        o.setValue(combine(content,ct));
        var win = Ext.getCmp("win");
        win.close();

        function combine(a,b){
            var returnStr = "";
            try {
            var aa = a.split("序#")[1].split("&");
            var wc = a.split("#");
            var bc = wc[0];
            var key1 =[];
            for(var j = 0; j < aa.length; j++) {
                key1.push(aa[j]);
            }
            var key2 =[];
            var bb = b.split("&");
             for(var k = 0; k < bb.length; k++) {
                key2.push(bb[k]);
            }

            for(var i=0;i<key2.length;i++){
                var flag = false;
                var keystr2 = key2[i].split("=")[0];
                var v2 = key2[i].split("=")[1];
                var value2 = "";
                if(v2.indexOf("<!")==0&&v2.indexOf(">")==v2.length-1) {
                    value2 = v2.split("<!")[1].split(">")[0];
                } else {
                    value2 = v2;
                }
                for(var n =0;n<key1.length;n++){
                    var keystr1 = key1[n].split("=")[0];
                    if(keystr2==keystr1){
                        flag=true;
                        continue;
                    }
                }
                if(!flag){
                    if(v2.indexOf("<!")==0&&v2.indexOf(">")==v2.length-1) {
                        if(bc.indexOf(value2)==-1){
                            bc = bc+"*["+value2+"]";
                        }
                    }
                    returnStr = returnStr +"&"+key2[i];

                }
            }

            returnStr = bc+"#"+wc[1]+"#"+wc[2]+returnStr;

            } catch(e) {
                Ext.MessageBox.alert('提示', '词模格式不正确!');
                return "";
            }

            return returnStr;
        }
    }

});