/*
 * File: app/view/MyViewport.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.view.MyViewport', {
    extend: 'Ext.container.Viewport',

    requires: [
        'Ext.form.field.ComboBox',
        'Ext.button.Button',
        'Ext.grid.Panel',
        'Ext.grid.View',
        'Ext.grid.column.Action',
        'Ext.toolbar.Paging',
        'Ext.form.field.TextArea',
        'Ext.form.RadioGroup',
        'Ext.form.field.Radio'
    ],

    border: 0,
    autoScroll: true,
    autoHeight: true,

    initComponent: function() {
        var me = this;

        Ext.applyIf(me, {
            items: [
                {
                    xtype: 'panel',
                    border: 0,
                    height: 500,
                    id: 'panelList',
                    defaults: {
                        labelWidth: 60
                    },
                    layout: 'column',
                    collapsed: false,
                    collapsible: true,
                    title: '简单词模显示区',
                    items: [
                        {
                            xtype: 'panel',
                            columnWidth: 1,
                            border: 0,
                            id: 'panelQueryCondition',
                            margin: '5px',
                            layout: 'column',
                            items: [
                                {
                                    xtype: 'textfield',
                                    columnWidth: 0.5,
                                    id: 'textfieldWordpat',
                                    margin: '10px 0px 0px 10px',
                                    width: 833,
                                    fieldLabel: '词模',
                                    labelWidth: 30
                                },
                                {
                                    xtype: 'textfield',
                                    columnWidth: 0.1,
                                    hidden: true,
                                    id: 'textfieldCorrectRatioFrom',
                                    minWidth: 70,
                                    style: 'margin-left:10px',
                                    fieldLabel: '正确率',
                                    labelWidth: 45
                                },
                                {
                                    xtype: 'textfield',
                                    columnWidth: 0.05,
                                    hidden: true,
                                    id: 'textfieldCorrectRatioTo',
                                    minWidth: 40,
                                    fieldLabel: '至',
                                    labelWidth: 18
                                },
                                {
                                    xtype: 'combobox',
                                    columnWidth: 0.15,
                                    hidden: true,
                                    id: 'comboboxAutoSendSwitch',
                                    minWidth: 120,
                                    style: 'margin-left:10px',
                                    fieldLabel: '自动发送开关',
                                    labelWidth: 80,
                                    store: 'StoreAutoSendSwitch'
                                },
                                {
                                    xtype: 'textfield',
                                    columnWidth: 0.1,
                                    hidden: true,
                                    id: 'textfieldCallNumberFrom',
                                    minWidth: 70,
                                    style: 'margin-left:10px',
                                    fieldLabel: '调用量',
                                    labelWidth: 45
                                },
                                {
                                    xtype: 'textfield',
                                    columnWidth: 0.05,
                                    hidden: true,
                                    id: 'textfieldCallNumberTo',
                                    minWidth: 40,
                                    style: 'margin-left:10px',
                                    fieldLabel: '至',
                                    labelWidth: 15
                                },
                                {
                                    xtype: 'button',
                                    id: 'buttonQuery',
                                    margin: '10px 0px 0px 50px',
                                    icon: '../Images/search-small.gif',
                                    listeners: {
                                        click: {
                                            fn: me.onButtonQueryClick,
                                            scope: me
                                        }
                                    }
                                }
                            ]
                        },
                        {
                            xtype: 'gridpanel',
                            columnWidth: 1,
                            height: 420,
                            id: 'gridpanelQueryResult',
                            margin: '10px 10px 0px 10px',
                            autoScroll: true,
                            enableColumnHide: false,
                            store: 'StoreGridPanel',
                            viewConfig: {
                                enableTextSelection: true,
                                loadingText: '词模加载中，请稍后！'
                            },
                            columns: [
                                {
                                    xtype: 'gridcolumn',
                                    width: 50,
                                    dataIndex: 'id',
                                    text: '序号'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        value=Ext.htmlEncode(value.replace(/\"/g,""));
                                        return '<div style="white-space:normal;"><font size="2">' + value + '</font></div>';

                                    },
                                    width: 460,
                                    dataIndex: 'simplewordpat',
                                    text: '简单词模'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return '&nbsp&nbsp<font size="2" >' + value + '</font>';
                                    },
                                    hidden: true,
                                    maxWidth: 80,
                                    width: 80,
                                    dataIndex: 'autosendswitch',
                                    text: '自动发送开关'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return '<font size="2">' + value + '</font>';
                                    },
                                    hidden: true,
                                    maxWidth: 100,
                                    dataIndex: 'correctratio',
                                    text: '准确率'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return '<font size="2">' + value + '</font>';
                                    },
                                    hidden: true,
                                    dataIndex: 'callnumber',
                                    text: '调用量'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        return '<div style="white-space:normal;"><font size="2">' + value + '</font></div>';
                                    },
                                    hidden: true,
                                    width: 400,
                                    dataIndex: 'city',
                                    text: '地市'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    hidden: true,
                                    width: 40,
                                    dataIndex: 'number',
                                    text: '数量'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        var value=Ext.htmlEncode(value);
                                        return '<div style="white-space:normal;"><font size="2">' + value + '</font></div>';
                                    },
                                    width: 50,
                                    dataIndex: 'issequence',
                                    text: '序列'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        var value=Ext.htmlEncode(value);
                                        return '<div style="white-space:normal;"><font size="2">' + value + '</font></div>';
                                    },
                                    width: 300,
                                    dataIndex: 'returnvalues',
                                    text: '返回值'
                                },
                                {
                                    xtype: 'gridcolumn',
                                    renderer: function(value, metaData, record, rowIndex, colIndex, store, view) {
                                        var value=Ext.htmlEncode(value);
                                        if(value == '等于词模'){
                                        	value = '普通词模';
                                        }
                                        return '<div style="white-space:normal;"><font size="2">' + value + '</font></div>';
                                    },
                                    width: 84,
                                    dataIndex: 'wordpattypename',
                                    text: '词模类型'
                                },
                                {
                                    xtype: 'actioncolumn',
                                    header: '区域属性',
                                    width: 97,
                                    items: [
                                        {
                                            handler: function(view, rowIndex, colIndex, item, e) {
                                                var AbstractPanel = Ext.getCmp("gridpanelQueryResult");
                                                var abs = AbstractPanel.store.getAt(rowIndex).get('simplewordpat');
                                                var abstractid = AbstractPanel.store.getAt(rowIndex).get('wordpatid');

                                                // var winid = 'myWin'+rwordid;
                                                // var w;
                                                // //创建window
                                                //     w = Ext.create("Ext.window.Window", {
                                                //     id: winid,
                                                //     title: "示例窗口",
                                                //     width: 500,
                                                //     height: 300,
                                                //     layout: "fit",
                                                //     autoShow: true,
                                                //     draggable: false,
                                                //     maximizable : false,// 最大化控制 值为true时可以最大化窗体
                                                //     modal:true,//背景变灰不可编辑
                                                //     contentEl: "content"
                                                // });

                                                // w.show();

                                                var url = "../citywindow/wordpatcity.jsp?wordpatid=" +abstractid+"&wordpat="+encodeURI(abs)+"&serviceid="+encodeURI(serviceids);


                                                var  w = new Ext.Window({
                                                    layout: "fit",
                                                    autoShow: true,
                                                    layout: 'absolute',
                                                    draggable: false,
                                                    maximizable : false,// 最大化控制 值为true时可以最大化窗体
                                                    modal:true,//背景变灰不可编辑
                                                    html:'<iframe src="'+ url +'" style="height:440px;width:500px;" ></iframe>',
                                                    title:"地市属性"
                                                });
                                                w.show();
                                            },
                                            icon: '../Images/editf.gif',
                                            iconCls: 'margin-left:5px;',
                                            tooltip: '查看编辑'
                                        }
                                    ]
                                }
                            ],
                            selModel: Ext.create('Ext.selection.CheckboxModel', {

                            }),
                            dockedItems: [
                                {
                                    xtype: 'pagingtoolbar',
                                    dock: 'bottom',
                                    id: 'ToolBar',
                                    displayInfo: true,
                                    store: 'StoreGridPanel',
                                    items: [
                                        {
                                            xtype: 'button',
                                            id: 'buttonAdd',
                                            icon: '../Images/add-small.gif',
                                            iconCls: 'x-btn-defualt-small-icon',
                                            text: '新增',
                                            tooltip: '新增',
                                            listeners: {
                                                click: {
                                                    fn: me.onButtonAddClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            id: 'buttonUpdate',
                                            icon: '../Images/edit.gif',
                                            iconCls: 'x-btn-defualt-small-icon',
                                            text: '修改',
                                            tooltip: '修改',
                                            listeners: {
                                                click: {
                                                    fn: me.onButtonUpdateClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        {
                                            xtype: 'button',
                                            id: 'buttonDelete',
                                            icon: '../Images/delete-small.gif',
                                            iconCls: 'x-btn-defualt-small-icon',
                                            text: '删除',
                                            tooltip: '删除',
                                            listeners: {
                                                click: {
                                                    fn: me.onButtonDeleteClick,
                                                    scope: me
                                                }
                                            }
                                        },
                                        /*{
                                            xtype: 'button',
                                            id: 'buttonTransfer',
                                            icon: '../Images/go.gif',
                                            text: '迁移',
                                            tooltip: '迁移',
                                            listeners: {
                                                click: {
                                                    fn: openTransferWordpatWin
                                                }
                                            }
                                        }*/
                                    ]
                                }
                            ],
                            listeners: {
                                render: {
                                    fn: me.onGridpanelQueryResultRender,
                                    scope: me
                                }
                            }
                        }
                    ]
                },
                {
                    xtype: 'panel',
                    border: 0,
                    height: 349,
                    id: 'panelEdit',
                    margin: '20px 0px 0px 0px',
                    layout: 'absolute',
                    title: '简单词模编辑区',
                    items: [
                        {
                            xtype: 'checkboxgroup',
                            setValue: function(val) {
                                var tmp=val;
                                if (val.split) {
                                    val = val.split(',');
                                }
                                this.reset(false);
                                for (var i = 0; i < val.length; i++) {
                                    for(var j=0;j<this.items.getCount();j++)
                                    {
                                        var c=this.items.items[j];
                                        if(tmp==""){
                                            if(c.boxLabel=="全选")
                                            c.setValue(false);
                                        }
                                        if (c.boxLabel == val[i]) {
                                            c.setValue(true);
                                        }
                                    }
                                }
                            },
                            reset: function(b) {
                                this.items.each(function (c) {
                                    if (c.inputValue != '全选')
                                    c.setValue(b);
                                });
                            },
                            getValue: function() {
                                var val = [];
                                this.items.each(function (c) {
                                    if (c.getValue() === true && c.inputValue != '全选')
                                    val.push(c.inputValue);
                                });
                                return val.join(',');
                            },
                            setCheckBox: function(c, val) {
                                if (c.inputValue == val) {
                                    c.setValue(true);
                                }
                            },
                            getText: function() {
                                var val = [];
                                this.items.each(function (c) {
                                    if (c.getValue() === true && c.inputValue != '全选')
                                    val.push(c.boxLabel);
                                });
                                return val.join(',');
                            },
                            height: 70,
                            hidden: true,
                            id: 'checkboxgroupCity',
                            style: 'margin-left:10px',
                            width: 920,
                            fieldLabel: '词模属地',
                            labelWidth: 60,
                            columns: 8,
                            listeners: {
                                beforerender: {
                                    fn: me.onCheckboxgroupCityBeforeRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'textfield',
                            x: 10,
                            y: 60,
                            id: 'tfautowordpat',
                            width: 380,
                            fieldLabel: '生成词模',
                            labelWidth: 60,
                            listeners: {
                                afterrender: {
                                    fn: me.onTfautowordpatAfterRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'combobox',
                            x: 440,
                            y: 60,
                            hidden: true,
                            id: 'cbChannel',
                            width: 140,
                            fieldLabel: '渠道',
                            labelWidth: 40,
                            value: '基金',
                            readOnly: true,
                            editable: false
                        },
                        {
                            xtype: 'button',
                            x: 650,
                            y: 60,
                            height: 23,
                            width: 80,
                            text: '生成',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            x: 750,
                            y: 60,
                            height: 23,
                            id: 'addreturnvalue',
                            width: 100,
                            text: '补充交互返回值',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick2,
                                    scope: me
                                },
                                render: {
                                    fn: me.onAddreturnvalueRender,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'panel',
                            x: 10,
                            y: 100,
                            border: 0,
                            height: 180,
                            id: 'panelWordpat',
                            width: 870,
                            layout: 'card',
                            items: [
                                {
                                    xtype: 'textareafield',
                                    height: 180,
                                    id: 'textareaWordpat',
                                    width: 855,
                                    fieldLabel: '新增词模',
                                    labelWidth: 60
                                },
                                {
                                    xtype: 'textareafield',
                                    height: 180,
                                    hidden: true,
                                    id: 'textfieldWordpatEdit',
                                    fieldLabel: '修改词模',
                                    labelWidth: 60
                                }
                            ]
                        },
                        {
                            xtype: 'button',
                            x: 900,
                            y: 150,
                            id: 'buttonSave',
                            icon: '../Images/save-small.gif',
                            iconCls: 'x-btn-defualt-small-icon',
                            tooltip: '保存',
                            listeners: {
                                click: {
                                    fn: me.onButtonSaveClick,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'button',
                            x: 800,
                            y: 60,
                            height: 23,
                            hidden: true,
                            width: 70,
                            text: '<font color=blue size=2>简单添加</font>',
                            listeners: {
                                click: {
                                    fn: me.onButtonClick1,
                                    scope: me
                                }
                            }
                        },
                        {
                            xtype: 'radiogroup',
                            x: 10,
                            y: 20,
                            id: 'wordpattypeid',
                            width: 650,
                            fieldLabel: '词模类型',
                            labelWidth: 60,
                            items: [
                                {
                                    xtype: 'radiofield',
                                    name: 'wt',
                                    boxLabel: '普通词模',
                                    checked: true
                                },
                                {
                                    xtype: 'radiofield',
                                    name: 'wt',
                                    boxLabel: '排除词模'
                                },
                                {
                                    xtype: 'radiofield',
                                    name: 'wt',
                                    boxLabel: '选择词模'
                                },
                                {
                                    xtype: 'radiofield',
                                    name: 'wt',
                                    boxLabel: '特征词模'
                                },
                                {
                                    xtype: 'radiofield',
                                    name: 'wt',
                                    hidden: true,
                                    boxLabel: '等于词模'
                                },
                                {
                                    xtype: 'radiofield',
                                    hidden: true,
                                    name: 'wt',
                                    boxLabel: '自学习词模'
                                }
                            ]
                        }
                    ]
                }
            ]
        });

        me.callParent(arguments);
    },

    onButtonQueryClick: function(button, e, eOpts) {
        var gridpanelQueryResult = Ext.getCmp('gridpanelQueryResult');

        gridpanelQueryResult.store.loadPage(1);
    },

    onButtonAddClick: function(button, e, eOpts) {
        //新增状态
        var checkboxgroupCity = Ext.getCmp("checkboxgroupCity");
        checkboxgroupCity.setValue("");
        var panelWordpat=Ext.getCmp("panelWordpat");
        Ext.getCmp("cbChannel").setValue("基金");
        panelWordpat.getLayout().setActiveItem(0);
        editstatus="insert";
        oldcity="";
        oldwordpat="";
        oldautosendswitch="";
    },

    onButtonUpdateClick: function(button, e, eOpts) {
        //将选中行赋值到下面的编辑窗口
        var selRecords = Ext.getCmp("gridpanelQueryResult").getSelectionModel().getSelection();
        var wordpat,city,autosendswitch,simplewordpat,wordpattypename;
        if (selRecords.length >= 1) {
            simplewordpat = selRecords[0].raw.simplewordpat.replace(/\"/g,"")+"#"+selRecords[0].raw.issequence+"#"+selRecords[0].raw.returnvalues;
            city = selRecords[0].raw.city;
            autosendswitch = selRecords[0].get("autosendswitch");
            wordpattypename = selRecords[0].get("wordpattypename");
            commonwordpatid = selRecords[0].raw.wordpatid;
        }else {
            Ext.MessageBox.alert("提示消息", "您未选中行！");
            return false;
        }

        Ext.getCmp("checkboxgroupCity").setValue(city);
        Ext.getCmp("tfautowordpat").setValue("");
        Ext.getCmp("cbChannel").setValue("基金");

        //填充对应词模类型
        var wdtype =Ext.getCmp("wordpattypeid");
        var length = wdtype.items.getCount();

        for (i = 0; i < length; i++) {
            wdtype.items.items[i].setValue(false);
            if(wdtype.items.items[i].boxLabel==wordpattypename){
                wdtype.items.items[i].setValue(true);
            }
             if(wdtype.items.items[i].boxLabel=="普通词模"&& wordpattypename=="自学习词模"){
                wdtype.items.items[i].setValue(true);
               simplewordpat = simplewordpat.replace('编者="auto"&',"");
            }
        }
        /**if(wordpattypename=="选择词模"){
           simplewordpat = simplewordpat.split('++*')[1];
        }else if(wordpattypename=="排除词模"){
           simplewordpat = simplewordpat.split('~*')[1];
        }else if(wordpattypename=="特征词模"){
           simplewordpat = simplewordpat.split('+*')[1];
        }*/


        wordpat = Ext.htmlDecode(wordpat);
        Ext.getCmp("panelWordpat").getLayout().setActiveItem(1);

        Ext.getCmp("textfieldWordpatEdit").setValue(simplewordpat);
        editstatus="update";
        oldwordpat=wordpat;
        oldcity=city;
        oldautosendswitch=autosendswitch;
        oldsimplewordpat=simplewordpat;

    },

    onButtonDeleteClick: function(button, e, eOpts) {
        //获取当前记录
        var selRecords = Ext.getCmp("gridpanelQueryResult").getSelectionModel().getSelection();
        var len = selRecords.length;
        if (len == 0) {
            Ext.MessageBox.alert("提示消息", "您未选中行");
            return false;
        }
        //删除前提示
        Ext.Msg.confirm("提示", "确定要删除吗?", function (btn) {
            if (btn == "yes") {
                var wordpat,city,autosendswitch,wordpatid,simplewordpat,issequence,returnvalues;
                city = "上海";
                var action = 'delete';
                var param={};
                param["cityids"]=cityids;
                param["brand"]=brand;
                param["service"]=service;
                param["topic"]=topic;
                param["_abstract"]=_abstract;
                param["kbdataids"]=kbdataids;
                param["container"]=container;
                param["city"]=city;
                if(len == 1){ //单个删除
                	action = 'delete';
                	wordpat = selRecords[0].raw.wordpat;
                    //city = selRecords[0].raw.city;
                    autosendswitch = selRecords[0].raw.autosendswitch;
                    wordpatid = selRecords[0].raw.wordpatid;
                    simplewordpat=selRecords[0].raw.simplewordpat.replace(/\"/g,"");
                    issequence=selRecords[0].raw.issequence;
                    returnvalues=selRecords[0].raw.returnvalues;
                    
                    param["autosendswitch"]=autosendswitch;
                    param["wordpatid"]=wordpatid;
                    param["simplewordpat"]=simplewordpat;
                    param["issequence"]=issequence;
                    param["returnvalues"]=returnvalues;
                    param["_wordpat"]=wordpat;
                }else{ // 批量删除
                	action = 'batchDelete';
                	var wordpatidList = [];
                	var simplewordpatList = [];
                	var _wordpatList = [];
                	for(var i = 0;i < selRecords.length;i++){
                		wordpatidList.push(selRecords[i].raw.wordpatid);
                		simplewordpatList.push(selRecords[i].raw.simplewordpat.replace(/\"/g,""));
                		_wordpatList.push(wordpat = selRecords[0].raw.wordpat);
                    }
                	
                	wordpatid = selRecords[0].raw.wordpatid;
                    simplewordpat=selRecords[0].raw.simplewordpat.replace(/\"/g,"");
                    param["wordpatid"]=JSON.stringify(wordpatidList);
                    param["simplewordpat"]=JSON.stringify(simplewordpatList);
                    param["_wordpat"] = JSON.stringify(_wordpatList);
                    console.log(param);
                }
                
                //调用Ajax方法，同步请求获取数据
                Ext.Ajax.request({
                    url: '../wordpat.action',
                    method: 'post',
                    params: {
                        action:action,
                        param: Ext.JSON.encode(param),
        //                 resourcetype:'wordpat',
                       operationtype:"D",
                       resourceid:serviceids,
                        wordpatid:wordpatid

                    },
                    async: false, //同步请求数据
                    //获取数据成功
                    success: function (result, request) {
                        var retobj = Ext.JSON.decode(result.responseText);
                        Ext.MessageBox.alert('保存结果', retobj.checkInfo);
                        var gridpanelQueryResult = Ext.getCmp('gridpanelQueryResult');
                        var ToolBar = Ext.getCmp("ToolBar");
                        var page = ToolBar.store.currentPage;
                        if(gridpanelQueryResult.store.data.length<=1){
                            page = page-1;
                            gridpanelQueryResult.store.loadPage(page);
                            if(page==0){
                                gridpanelQueryResult.store.loadPage(1);
                            }
                        }else{
                            gridpanelQueryResult.store.loadPage(page);
                        }
                        Ext.getCmp("checkboxgroupCity").setValue("");
                        Ext.getCmp("tfautowordpat").setValue("");
                        Ext.getCmp("cbChannel").setValue("基金");
                        Ext.getCmp("panelWordpat").getLayout().setActiveItem(0);
                        editstatus="insert";
                        oldcity="";
                        oldwordpat="";
                        oldautosendswitch="";
                    },
                    //获取数据失败
                    failure: function (result, request) {
                        Ext.MessageBox.alert('系统异常', '请求数据失败！');
                    }
                });
            }
        });
    },

    onGridpanelQueryResultRender: function(component, eOpts) {
        Ext.getCmp('gridpanelQueryResult').store.loadPage(1);
    },

    onCheckboxgroupCityBeforeRender: function(component, eOpts) {
        if(loaded)return;
        loaded=true;
        //填充 checkboxgroupCity
        var checkboxgroupCity = Ext.getCmp("checkboxgroupCity");
        //地市全选复选框
        var checkall = Ext.create('Ext.form.field.Checkbox', {
            boxLabel: '全选',
            inputValue: '全选',
            onChange:function(newVal, oldVal) {
                checkboxgroupCity.reset(newVal);
                //原onChange的实现
                if (this.validateOnChange) {
                    this.validate();
                }
                this.checkDirty();
            }
        });
        checkboxgroupCity.items.add(checkall);
        if(citys=="" || citys==null)
        {
            //调用Ajax方法，同步请求获取数据
            Ext.Ajax.request({
                url: '../wordpat.action?action=city&cityids='+cityids,
                method: 'post',
                async: false, //同步请求数据
                //获取数据成功
                success: function (result, request) {
                    var retobj = Ext.JSON.decode(result.responseText);
                    citys=retobj.citys;
                },
                //获取数据失败
                failure: function (result, request) {
                    Ext.MessageBox.alert('系统异常', '请求数据失败！');
                }
            });
        }
        var arycity=citys.split(",");
        var arycityid=cityids.split(",");
        for(var i=0;i<arycityid.length;i++){
            var inputValue = arycityid[i];
            var boxLabel = arycity[i];
            var aCheckbox =createCheckbox(boxLabel, inputValue, inputValue, inputValue);
            checkboxgroupCity.items.add(aCheckbox);
        }
    },

    onTfautowordpatAfterRender: function(component, eOpts) {
        Ext.getCmp('tfautowordpat').setValue(_abstract.split(">")[1]);
    },

    onButtonClick: function(button, e, eOpts) {
        if(Ext.String.trim(Ext.getCmp('tfautowordpat').getValue())=='') {
            Ext.MessageBox.alert('提示', '请在生成词模的输入框填写内容！');
            return;
        }

        if(Ext.getCmp('cbChannel').getValue()==null){
            Ext.MessageBox.alert('提示', '请选择渠道！');
            return;
        }
        var param={};

        param['autowordpat']=Ext.String.trim(Ext.getCmp("tfautowordpat").getValue());
        param['channel']=Ext.getCmp("cbChannel").getValue();
        param['kbdataids']=kbdataids;
        Ext.Ajax.request({
            url: '../wordpat.action',
            method: 'post',
            params: {
                action:'autowordpat',
                param: Ext.JSON.encode(param)
            },
            async: false,
            success: function (result, request) {
                var retobj = Ext.JSON.decode(result.responseText);
                var resultStr = retobj.result;
                var startWith = function(str,value){
                    var reg=new RegExp("^"+str);
                    return reg.test(value);
                };
                if(retobj.result=="无"){
                    Ext.MessageBox.alert('提示信息', '生成失败！');
                }else if(resultStr.length > 0 && startWith('ERROR',resultStr)){
                    Ext.MessageBox.alert('提示信息', resultStr);
                }else{

                    //          if(editstatus==="update"){
                    //             Ext.getCmp('textfieldWordpatEdit').setValue(retobj.result.replace('编者="自学习"',''));
                    //         }else{
                    //             Ext.getCmp('textareaWordpat').setValue(retobj.result.replace('编者="自学习"',''));
                    //         }
                    openWin(resultStr,editstatus,retobj.oovWord);

                }

            },
            failure: function (result, request) {
                Ext.MessageBox.alert('系统异常', '请求数据失败！');
            }
        });

        //弹框选择子句词模
        function openWin(resultStr,editstatus,errorStr){


            var win = Ext.create('Ext.window.Window', {
                x:130,
                y:50,
                // height: 455,
                // width: 685,
                height: 460,
                width: 720,
                layout: 'fit',
                //如果不允许窗体被拖拽，加上下面这句
                draggable: true,
                maximizable : false,// 最大化控制 值为true时可以最大化窗体
                modal:true,//背景变灰不可编辑
                autoScroll : true,
                layout: {
                    type: 'absolute'
                },
                title:'自学习词模',
                items: [
                    {
                        xtype: 'radiogroup',
                        x: 30,
                        y: 40,
                        height: 100,
                        width: 650,
                        id: 'nextabs',
                        style: 'margin-left:10px',
                        //width: 490,
                        autoScroll: true,
                        fieldLabel: '词模条目',
                        layout: {
                            align: 'stretch',
                            type: 'vbox'
                        },
                        listeners: {
                            beforerender:
                            function(component, eOpts) {
                                //加载节点开始
                                raabs = Ext.getCmp('nextabs');
                                var item ;
                                var next_abs_namessarry = resultStr.split('$_$');
                                var startWith = function(str,value){
                                    var reg=new RegExp("^"+str);
                                    return reg.test(value);
                                };
                                var start = 0;
                                for(var i=0;i<next_abs_namessarry.length;i++){

                                    var w  = next_abs_namessarry[i].split('@_@');
                                    //过滤nlp版本
                                    if(w != null && w.length > 0 && startWith('OOV',w)){
                                        start++;
                                        continue;
                                    }
                                    if(i==start){
                                        item =  new Ext.form.Radio({boxLabel:w[0],inputValue:w[1],name:'radio',checked:true});
                                    }else{
                                        item =  new Ext.form.Radio({boxLabel:w[0],inputValue:w[1],name:'radio'});
                                    }
                                    raabs.items.add(item);
                                }
                                //加载节点结束
                            }
                        }
                    },
                    {
                        xtype: 'textfield',
                        id:'targetedquery',
                        x: 40,
                        y: 340,
                        width: 410,
                        fieldLabel: '针对问题'
                    },
                    {
                        xtype: 'textfield',
                        id:'matchcount',
                        x: 40,
                        y: 370,
                        width: 410,
                        fieldLabel: '最大未匹配字数'

                    } ,
                    {
                        xtype: 'button',
                        x: 180,
                        y: 400,
                        id: 'ok',
                        width: 60,
                        text: '确定',
                        listeners: {
                            click:function(button, e, eOpts) {
                                var targetedquery =Ext.String.trim(Ext.getCmp('targetedquery').getValue());
                                var matchcount =Ext.String.trim(Ext.getCmp('matchcount').getValue());
                                if(targetedquery=='') {
                                    Ext.MessageBox.alert('提示', '请填写针对问题！');
                                    return;
                                }
                                var rvalue ;
                                if(matchcount!=""&& matchcount!=null){
                                    rvalue ='&针对问题="'+targetedquery+'"&最大未匹配字数="'+ matchcount+'"';
                                }else{
                                    rvalue ='&针对问题="'+targetedquery+'"';
                                }
                                var raabsnames = raabs.items.getCount();
                                for(var i=0;i<raabsnames;i++){
                                    if (raabs.items.items[i].checked) {
                                        if(editstatus==="update"){
                                            Ext.getCmp('textfieldWordpatEdit').setValue(raabs.items.items[i].inputValue+rvalue);
                                        }else{
                                            Ext.getCmp('textareaWordpat').setValue(raabs.items.items[i].inputValue+rvalue);
                                        }
                                        win.close();
                                    }
                                }

                            }
                        }
                    },
                    {
                        xtype: 'button',
                        x:320,
                        y:400,
                        width: 60,
                        text: '取消',
                        listeners: {
                            click:function(button, e, eOpts) {
                                win.close();
                            }
                        }
                    },
                    {
                        xtype: 'label',
                        id:'errorInfo',
                        x: 40,
                        y: 300,
                        width: 650,
                        height: 40,
                        text: '',
                        listeners: {
                        }
                    }
                ]
            });
            win.show();
            Ext.getCmp('targetedquery').setValue(Ext.getCmp('tfautowordpat').getValue());
            if(errorStr !=null && errorStr != ''){
                var errorStrArr = errorStr.split('$_$');
                var word = [];
                errorStrArr.forEach(function(element, index, array) {
                    word.push(element.replace('(OOV)',''));
                });
                var errorHtml = '<b>系统提示：</b>分词中（'+word.join('，')+'）的近类或父类不存在,需要添加对应的词类；如已存在，则需要在词模体中手动修改。';
                Ext.getCmp('errorInfo').setText(errorHtml,false);
            }
        }

    },

    onButtonClick2: function(button, e, eOpts) {
        var o ;
        if(editstatus== "insert"){
            o=Ext.getCmp('textareaWordpat');
        }else{
            o= Ext.getCmp('textfieldWordpatEdit');
        }
        var content = o.getValue().replace(new RegExp(' ','g'),'');
        if(content === ''){
            Ext.MessageBox.alert('提示', '请先填写词模!');
            return;
        }

        Ext.Ajax.request({
            url: '../wordpat.action',
            method: 'post',
            params: {
                action:'addreturnvalue',
                kbdataid:kbdataids
            },
            async: false,
            success: function (result, request) {
                var retobj = Ext.JSON.decode(result.responseText);
                var resultStr = retobj.msg;
                var flag  = retobj.success;
                if(flag){
                    o.setValue(combine(content,resultStr));
                } else {
                    if(resultStr) {
                        Ext.MessageBox.alert('提示信息', resultStr);
                    } else {
                        var win = Ext.create('MyApp.view.MyWindow2',{id:'win'});
                        win.show();
                    }
                }

            },
            failure: function (result, request) {
                Ext.MessageBox.alert('系统异常', '请求数据失败！');
            }
        });

        function combine(a,b){
            var aa = a.split("序#")[1].split("&");
            var wc = a.split("#");
            var bc = wc[0];
            var key1 =[];
            for(var j = 0; j < aa.length; j++) {
                key1.push(aa[j]);
            }
            var key2 =[];
            var bb = b.split("&");
             for(var k = 0; k < bb.length; k++) {
                key2.push(bb[k]);
            }

            var returnStr ="";
            for(var i=0;i<key2.length;i++){
                var flag = false;
                var keystr2 = key2[i].split("=")[0];
                var value2 = key2[i].split("=")[1].split("<!")[1].split(">")[0];
                for(var n =0;n<key1.length;n++){
                    var keystr1 = key1[n].split("=")[0];
                    if(keystr2==keystr1){
                        flag=true;
                        continue;
                    }
                }
                if(!flag){
                    if(bc.indexOf(value2)==-1){
                        bc = bc+"*["+value2+"]";
                    }
                     returnStr = returnStr +"&"+key2[i];

                }
            }

            returnStr = bc+"#"+wc[1]+"#"+wc[2]+returnStr;
            return returnStr;


        }

        String.prototype.startWith=function(str){
          var reg=new RegExp("^"+str);
          return reg.test(this);
        };
    },

    onAddreturnvalueRender: function(component, eOpts) {

        // Ext.Ajax.request({
        //     url: '../wordpat.action',
        //     method: 'post',
        //     params: {
        //         action:'isshowbutton',
        //         kbdataid:kbdataids
        //     },
        //     async: false,
        //     success: function (result, request) {
        //         var retobj = Ext.JSON.decode(result.responseText);
        //         var resultStr = retobj.msg;
        //         if(resultStr=="是"){
        //             Ext.getCmp('addreturnvalue').show();
        //         }else{
        //           Ext.getCmp('addreturnvalue').hide();

        //         }

        //     },
        //     failure: function (result, request) {
        //         Ext.MessageBox.alert('系统异常', '请求数据失败！');
        //     }
        // });


        if(brand.indexOf("IVR机器人")!=-1){

          Ext.getCmp('addreturnvalue').show();
        }else {
          Ext.getCmp('addreturnvalue').hide();
        }


    },

    onButtonSaveClick: function(button, e, eOpts) {
        /*alert(abs_name);
        alert(pre_abs_name);
        alert(next_abs_names);
        alert(chartaction);
        alert(queryorresponse);*/
        var oldwordpattypename;
        //保存按钮开始
        var checkboxgroupCity = Ext.getCmp("checkboxgroupCity");
        var city=checkboxgroupCity.getText();
        city="上海";
        var temp;
        if(city===""){
            Ext.MessageBox.alert("提示消息", "您未选择词模属地！");
            return false;
        }
        var selRecords = Ext.getCmp("gridpanelQueryResult").getSelectionModel().getSelection();
        if (selRecords.length >= 1) {
            oldwordpattypename = selRecords[0].get("wordpattypename");
        }

        var wordpat,simplewordpat,wordpatid,raabs,wordpattypename;
        var textareaWordpat=Ext.getCmp("textareaWordpat");
        var wdtype =Ext.getCmp("wordpattypeid");
        var wordpattypelength = wdtype.items.getCount();
        for(var i=0;i<wordpattypelength;i++){
            if (wdtype.items.items[i].checked) {
                wordpattypename =wdtype.items.items[i].boxLabel;
            }
        }


        if(editstatus =="update"){
            simplewordpat = Ext.getCmp("textfieldWordpatEdit").getValue().replace(new RegExp(' ','g'),'');

            if(simplewordpat===""){
                Ext.MessageBox.alert("提示消息", "词模不能为空！");
                return false;
            }else if(oldsimplewordpat==simplewordpat&& oldcity==city && wordpattypename==oldwordpattypename){
                Ext.MessageBox.alert("提示消息", "没有更改，无需保存！");
                return false;
            }else if(simplewordpat.split('#')[0].indexOf("~")!=-1){
                Ext.MessageBox.alert("提示消息", "词模中有非法字符 ~ 存在");
                return false;
            }else if(simplewordpat.split('#')[0].indexOf("+")!=-1){
                Ext.MessageBox.alert("提示消息", "词模中有非法字符 + 存在");
                return false;
            }

        }else{
            simplewordpat=textareaWordpat.getValue().replace(new RegExp(' ','g'),'');
            if(simplewordpat===""){
                Ext.MessageBox.alert("提示消息", "词模不能为空！");
                return false;
            }else if(simplewordpat.split('#')[0].indexOf("~")!=-1){
                Ext.MessageBox.alert("提示消息", "词模中有非法字符 ~ 存在");
                return false;
            }else if(simplewordpat.split('#')[0].indexOf("+")!=-1){
                Ext.MessageBox.alert("提示消息", "词模中有非法字符 + 存在");
                return false;
            }


        }


        if(wordpattypename!="等于词模"&& wordpattypename=="普通词模"){

            if(simplewordpat.indexOf("类-")!=-1&&simplewordpat.indexOf("类*")==-1){
                Ext.MessageBox.alert("提示消息", "请确认词模格式是否和词模类型一致");
                return false;
            }

        }

        if(wordpattypename =="等于词模"){
            if(simplewordpat.indexOf("类-")==-1){
                Ext.MessageBox.alert("提示消息", "请确认词模格式是否和词模类型一致");
                return false;
            }else{
                if(simplewordpat.indexOf("类*")!=-1){
                    Ext.MessageBox.alert("提示消息", "请确认词模格式是否和词模类型一致");
                    return false;
                }
            }
        }


        //排除词模，如果只有一个必选项，并且该必选项是子句时，不允许添加
        if(wordpattypename =="排除词模"&& simplewordpat.indexOf("子句")!=-1 ){
            //     var tempsimplewordpat = simplewordpat.replace(new RegExp('-','g'),'*');
            if(simplewordpat.indexOf("*")==-1&&simplewordpat.indexOf("-")==-1){
                Ext.MessageBox.alert("提示消息", '系统不支持单子句排除词模，建议附加另一个不带"[]"的近类或父类');
                return false;
            }
        }


        //var   re =/[\s\S#有序#\s\S]/;
        //var result =  re.test(simplewordpat);
        //alert(result);
        //return flase;
        if(simplewordpat.indexOf('(OOV)')!=-1){
            Ext.MessageBox.alert('提示消息', '（OOV）为系统未识别词类，需新增对应词词类!');
            return false;
        }

        if(simplewordpat.indexOf("@")!=-1){
            Ext.MessageBox.alert("提示消息", "存在非法字符 '@' ");
            return false;
        }
        if(simplewordpat.indexOf("#无序#")==-1&&simplewordpat.indexOf("#有序#")==-1){
            Ext.MessageBox.alert("提示消息", "请输入正确格式序列：'#无序#' 或 '#有序#'");
            return false;
        }

        if(wordpattypename == "等于词模"){
            wordpattype="1";
        }
        else if (wordpattypename == "排除词模") {
            wordpattype="2";
        } else if (wordpattypename =="选择词模") {
            wordpattype="3";
        } else if (wordpattypename == "特征词模") {
            wordpattype="4";
        }else if (wordpattypename == "自学习词模"){
            wordpattype="5";
        }else{
            wordpattype="0";
        }


        //alert(wordpattype);

        //下一节点摘要不为空时作弹框处理
        if(editstatus!="update"&& next_abs_names!=""&&queryorresponse!="咨询"){
            var win = Ext.create('Ext.window.Window', {
                x:190,
                y:140,
                height: 283,
                width: 526,
                layout: 'fit',
                //如果不允许窗体被拖拽，加上下面这句
                draggable: true,
                maximizable : false,// 最大化控制 值为true时可以最大化窗体
                modal:true,//背景变灰不可编辑
                autoScroll : true,
                layout: {
                    type: 'absolute'
                },
                title:'请选择后续节点',
                items: [
                    {
                        xtype: 'radiogroup',
                        x: 10,
                        y: 50,
                        height: 200,
                        id: 'nextabs',
                        style: 'margin-left:10px',
                        width: 490,
                        autoScroll: true,
                        fieldLabel: '节点名称',
                        layout: {
                            align: 'stretch',
                            type: 'vbox'
                        },
                        listeners: {
                            beforerender:
                            function(component, eOpts) {
                                //加载节点开始
                                raabs = Ext.getCmp('nextabs');
                                var item ;
                                var next_abs_namessarry = next_abs_names.split('$_$');
                                for(var i=0;i<next_abs_namessarry.length;i++){
                                    if(i==0){
                                        item =  new Ext.form.Radio({boxLabel:next_abs_namessarry[i],name:'radio',checked:true});
                                    }else{
                                        item =  new Ext.form.Radio({boxLabel:next_abs_namessarry[i],name:'radio'});
                                    }
                                    raabs.items.add(item);
                                }
                                //加载节点结束
                            }
                        }
                    },
                    {
                        xtype: 'button',
                        x: 430,
                        y: 220,
                        id: 'ok',
                        width: 60,
                        text: '确定',
                        listeners: {
                            click:function(button, e, eOpts) {
                                //添加词模开始
                                if(editstatus==="update"){
                                    var selRecords = Ext.getCmp("gridpanelQueryResult").getSelectionModel().getSelection();
                                    var len = selRecords.length;
                                    if (len == 0) {
                                        Ext.MessageBox.alert("提示消息", "您未选中行");
                                        return false;
                                    }
                                    wordpat = selRecords[0].raw.wordpat;
                                    wordpatid = selRecords[0].raw.wordpatid;
                                    var textfieldWordpatEdit=Ext.getCmp("textfieldWordpatEdit");
                                    simplewordpat=Ext.String.trim(textfieldWordpatEdit.getValue());

                                    if(oldwordpat==simplewordpat && oldcity==city){
                                        Ext.MessageBox.alert("提示消息", "没有更改，无需保存！");
                                        return false;
                                    }


                                }else{
                                    var textareaWordpat=Ext.getCmp("textareaWordpat");
                                    simplewordpat=Ext.String.trim(textareaWordpat.getValue());

                                }
                                if(simplewordpat===""){
                                    Ext.MessageBox.alert("提示消息", "词模不能为空！");
                                    return false;
                                }


                                simplewordpat = simplewordpat.replace(new RegExp("\r\n",'g'),"\n");
                                simplewordpat = simplewordpat.replace(/^\n+|\n+$/g,"");

                                temp=simplewordpat.split('\n');
                                temp=quchong(temp);
                                simplewordpat="";
                                for(var i=0;i<temp.length;i++){
                                    if(temp[i]!=''&&temp[i]!='\n'){
                                        if(wordpattypename=="选择词模"){

                                            simplewordpat += "++*"+temp[i]+'\n';
                                        }else if(wordpattypename=="排除词模"){

                                            simplewordpat += "~*"+temp[i]+'\n';
                                        }else if(wordpattypename=="特征词模"){
                                            simplewordpat += "+*"+temp[i]+'\n';
                                        }else{
                                            simplewordpat += temp[i]+'\n';
                                        }

                                    }
                                }
                                simplewordpat= simplewordpat.substr(0,simplewordpat.length-1);

                                //alert(simplewordpat);





                                /**  if(wordpattypename=="选择词模"){

                                           simplewordpat = "++*"+simplewordpat;
                                           }else if(wordpattypename=="排除词模"){

                                           simplewordpat = "~*"+simplewordpat;
                                           }else if(wordpattypename=="特征词模"){
                                           simplewordpat = "+*"+simplewordpat;
                                           } */

                                var param={};
                                simplewordpat = simplewordpat.replace(new RegExp(' ','g'),'');

                                param["cityids"]=cityids;
                                param["brand"]=brand;
                                param["service"]=service;
                                param["topic"]=topic;
                                param["_abstract"]=_abstract;
                                param["kbdataids"]=kbdataids;

                                param["simplewordpat"] = simplewordpat.replace(/[\[\s+]\]/g,']');
                                param["_wordpat"]=wordpat;
                                param["city"]=city;
                                param["autosendswitch"]="0";
                                param["oldcity"]=oldcity;
                                param["oldwordpat"]=wordpat;
                                param["wordpattype"]=wordpattype;
                                param["wordpatid"]=wordpatid;
                                param["container"]=container;

                                //流程图页面参数
                                param["abs_name"]=abs_name;
                                param["pre_abs_name"]=pre_abs_name;
                                param["chartaction"]=chartaction;
                                param["queryorresponse"]=queryorresponse;

                                var raabsnames = raabs.items.getCount();
                                for(var i=0;i<raabsnames;i++){
                                    if (raabs.items.items[i].checked) {
                                        param["next_abs_name"]=raabs.items.items[i].boxLabel;
                                    }
                                }
                                if(editstatus==="update"){
                                    param["oldsimplewordpat"]=oldsimplewordpat;
                                }
                                //调用Ajax方法，同步请求获取数据
                                Ext.Ajax.request({
                                    url: '../wordpat.action',
                                    method: 'post',
                                    params: {
                                        action:editstatus,
                                        param: Ext.JSON.encode(param)
                                    },
                                    async: false, //同步请求数据
                                    //获取数据成功
                                    success: function (result, request) {
                                        var retobj = Ext.JSON.decode(result.responseText);
                                        Ext.MessageBox.alert('保存结果', retobj.checkInfo);
                                        if(editstatus=="update"){
                                            if(retobj.checkInfo=='更新成功！'){
                                                var selRecords = Ext.getCmp("gridpanelQueryResult").getSelectionModel().getSelection();
                                                var str = simplewordpat;
                                                var autosendswitch1;
                                                autosendswitch1="关";
                                                var str1 = city;
                                                var str2 = autosendswitch1;
                                                selRecords[0].set('city',str1);
                                                selRecords[0].set('simplewordpat',str);
                                                selRecords[0].set('autosendswitch',str2);
                                                var ci = city.split(',');
                                                selRecords[0].set('number',ci.length);
                                                selRecords[0].raw.simplewordpat = simplewordpat;
                                                selRecords[0].raw.city = city;
                                                selRecords[0].raw.autosendswitch = "0";
                                                selRecords[0].commit();
                                                Ext.getCmp("textfieldWordpatEdit").setValue("");
                                                Ext.getCmp("checkboxgroupCity").setValue("");
                                                Ext.getCmp("tfautowordpat").setValue("");
                                                Ext.getCmp("cbChannel").setValue("基金");
                                                var page = Ext.getCmp("ToolBar").store.currentPage;
                                                Ext.getCmp('gridpanelQueryResult').store.loadPage(page);
                                            }else{

                                            }
                                        }else{
                                            if(retobj.checkInfo=='插入成功!'){
                                                win.close();
                                                var textfieldWordpatEdit=Ext.getCmp("textareaWordpat");
                                                textfieldWordpatEdit.setValue("");
                                                var checkboxgroupCity = Ext.getCmp("checkboxgroupCity");
                                                checkboxgroupCity.setValue("");
                                                var page = Ext.getCmp("ToolBar").store.currentPage;
                                                Ext.getCmp('gridpanelQueryResult').store.loadPage(page);
                                            }
                                        }
                                    },
                                    //获取数据失败
                                    failure: function (result, request) {
                                        Ext.MessageBox.alert('系统异常', '请求数据失败！');
                                    }
                                });
                            }
                        }
                    },
                    {
                        xtype: 'button',
                        x: 350,
                        y: 220,
                        width: 60,
                        text: '取消',
                        listeners: {
                            click:function(button, e, eOpts) {
                                win.close();
                            }
                        }
                    }
                ]
            });
            win.show();
        }else{
            var operationtype;
            if(editstatus==="update"){
                operationtype="U";
                var selRecords = Ext.getCmp("gridpanelQueryResult").getSelectionModel().getSelection();
                var len = selRecords.length;
                if (len == 0) {
                    Ext.MessageBox.alert("提示消息", "请选中行数据点击修改按钮进行更新！");
                    return false;
                }
                wordpat = selRecords[0].raw.wordpat;
                if(commonwordpatid==""){
                    Ext.MessageBox.alert("提示消息", "请选中行数据点击修改按钮，进行更新！");
                    return false;
                }else{
                    wordpatid = commonwordpatid;
                }

                var textfieldWordpatEdit=Ext.getCmp("textfieldWordpatEdit");
                simplewordpat=textfieldWordpatEdit.getValue();
                simplewordpat = simplewordpat.replace(new RegExp(' ','g'),'');
                if(oldwordpat==simplewordpat && oldcity==city){
                    Ext.MessageBox.alert("提示消息", "没有更改，无需保存！");
                    return false;
                }
            }else{
                operationtype="A";
                var textareaWordpat2=Ext.getCmp("textareaWordpat");
                simplewordpat=Ext.String.trim(textareaWordpat2.getValue());
                simplewordpat = simplewordpat.replace(new RegExp(' ','g'),'');
            }
            if(simplewordpat===""){
                Ext.MessageBox.alert("提示消息", "词模不能为空！");
                return false;
            }

            /**if(wordpattypename=="选择词模"){
                  simplewordpat = "++*"+simplewordpat;
                 }else if(wordpattypename=="排除词模"){
                  simplewordpat = "~*"+simplewordpat;
                }else if(wordpattypename=="特征词模"){
                 simplewordpat = "+*"+simplewordpat;
                  }*/

            simplewordpat = simplewordpat.replace(new RegExp("\r\n",'g'),"\n");
            simplewordpat = simplewordpat.replace(/^\n+|\n+$/g,"");
            temp=simplewordpat.split('\n');

            temp=quchong(temp);
            simplewordpat="";
            for(var i=0;i<temp.length;i++){
                if(temp[i]!=''&&temp[i]!='\n'){
                    if(temp[i].endWith('&')){
                        Ext.MessageBox.alert('系统提示', '词模语法有误,勿以&结尾!');
                        return;
                    }

                    if(wordpattypename=="选择词模"){
                        simplewordpat += "++*"+temp[i]+'\n';
                    }else if(wordpattypename=="排除词模"){

                        simplewordpat += "~*"+temp[i]+'\n';
                    }else if(wordpattypename=="特征词模"){
                        simplewordpat += "+*"+temp[i]+'\n';
                    }else{
                        simplewordpat += temp[i]+'\n';
                    }

                }
            }

            simplewordpat= simplewordpat.substr(0,simplewordpat.length-1).replace(/[\[\s+]\]/g,']');

            //alert(simplewordpat);

            var param={};
            param["cityids"]=cityids;
            param["brand"]=brand;
            param["service"]=service;
            param["topic"]=topic;
            param["_abstract"]=_abstract;
            param["kbdataids"]=kbdataids;
            param["simplewordpat"] = simplewordpat;
            param["_wordpat"]=wordpat;
            param["city"]=city;
            param["autosendswitch"]="0";
            param["oldcity"]=oldcity;
            param["oldwordpat"]=wordpat;
            param["wordpattype"]=wordpattype;
            param["wordpatid"]=wordpatid;
            param["container"]=container;

            //流程图页面参数
            param["abs_name"]=abs_name;
            param["pre_abs_name"]=pre_abs_name;
            param["chartaction"]=chartaction;
            param["queryorresponse"]=queryorresponse;
            param["next_abs_names"]=next_abs_names;
            if(editstatus==="update"){
                param["oldsimplewordpat"]=oldsimplewordpat;
            }


            //调用Ajax方法，同步请求获取数据
            Ext.Ajax.request({
                url: '../wordpat.action',
                method: 'post',
                params: {
                    action:editstatus,
                    param: Ext.JSON.encode(param),
                    //             resourcetype:'wordpat',
                    operationtype:operationtype,
                    resourceid:serviceids,
                    wordpatid:wordpatid


                },
                async: false, //同步请求数据
                //获取数据成功
                success: function (result, request) {
                    var retobj = Ext.JSON.decode(result.responseText);
                    Ext.MessageBox.alert('保存结果', retobj.checkInfo);
                    if(editstatus=="update"){
                        if(retobj.checkInfo=='更新成功！'){
                            commonwordpatid="";
                            var selRecords = Ext.getCmp("gridpanelQueryResult").getSelectionModel().getSelection();
                            var str = simplewordpat;
                            var autosendswitch1;
                            autosendswitch1="关";
                            var str1 = city;
                            var str2 = autosendswitch1;
                            selRecords[0].set('city',str1);
                            selRecords[0].set('simplewordpat',str);
                            selRecords[0].set('autosendswitch',str2);
                            var ci = city.split(',');
                            selRecords[0].set('number',ci.length);
                            selRecords[0].raw.simplewordpat = simplewordpat;
                            selRecords[0].raw.city = city;
                            selRecords[0].raw.autosendswitch = "0";
                            selRecords[0].commit();
                            Ext.getCmp("textfieldWordpatEdit").setValue("");
                            Ext.getCmp("checkboxgroupCity").setValue("");
                            Ext.getCmp("tfautowordpat").setValue("");
                            Ext.getCmp("cbChannel").setValue("基金");
                            var page = Ext.getCmp("ToolBar").store.currentPage;
                            Ext.getCmp('gridpanelQueryResult').store.loadPage(page);
                        }else{
                        }
                    }else{
                        if(retobj.checkInfo=='插入成功!'){
                            commonwordpatid="";
                            var textfieldWordpatEdit=Ext.getCmp("textareaWordpat");
                            textfieldWordpatEdit.setValue("");
                            var checkboxgroupCity = Ext.getCmp("checkboxgroupCity");
                            checkboxgroupCity.setValue("");
                            var page = Ext.getCmp("ToolBar").store.currentPage;
                            Ext.getCmp('gridpanelQueryResult').store.loadPage(page);
                        }
                    }
                },
                //获取数据失败
                failure: function (result, request) {
                    Ext.MessageBox.alert('系统异常', '请求数据失败！');
                }
            });
        }


        function quchong(a){
            var n = {},r=[]; //n为hash表，r为临时数组
            for(var i = 0; i < a.length; i++){ //遍历当前数组
                if (!n[a[i]]){ //如果hash表中没有当前项
                    n[a[i]] = true; //存入hash表
                    r.push(a[i]); //把当前数组的当前项push到临时数组里面
                }
            }
            return r;
        }

        String.prototype.endWith=function(str){
            if(str==null||str==""||this.length==0||str.length>this.length)
                return false;
            if(this.substring(this.length-str.length)==str)
                return true;
            else
                return false;
            return true;
        }
    },

    onButtonClick1: function(button, e, eOpts) {
        //保存按钮
        var raabs;
        var checkboxgroupCity = Ext.getCmp("checkboxgroupCity");
        var city=checkboxgroupCity.getText();
        var wordpattypename;//词模类型名字
        var wdtype =Ext.getCmp("wordpattypeid");
        var wordpattypelength = wdtype.items.getCount();
             for(var i=0;i<wordpattypelength;i++){
                if (wdtype.items.items[i].checked) {
                    wordpattypename =wdtype.items.items[i].boxLabel;
                }
            }

        city="上海";
        if(city===""){
            Ext.MessageBox.alert("提示消息", "您未选择词模属地！");
            return false;
        }









        var n = 1;
        var h = 260;
        var win = Ext.create('Ext.window.Window', {
            x:130,
            y:100,
            height: 383,
            width: 683,
            layout: 'fit',
            //如果不允许窗体被拖拽，加上下面这句
            draggable: false,
        	maximizable : false,// 最大化控制 值为true时可以最大化窗体
            modal:true,//背景变灰不可编辑
            autoScroll : true,
            layout: {
                type: 'absolute'
            },
            title: '简单词模',items: [
                {
                    xtype: 'button',
                    x: 530,
                    y: 40,
                    width: 80,
                    text: '生成模板',
                    listeners: {
                        click:
                            function(button, e, eOpts) {
                                //通过问题生成词模
                                if(Ext.String.trim(Ext.getCmp('s_question').getValue())=='') {
                                    Ext.MessageBox.alert('提示信息', '请填写问题内容！');
                                    return;
                                }
                                var param={};
                                param['autowordpat']=Ext.String.trim(Ext.getCmp("s_question").getValue());
                                param['channel']=Ext.getCmp("s_cbChannel").getValue();
                                Ext.Ajax.request({
                                url: '../wordpat.action',
                                method: 'post',
                                params: {
                                    action:'autowordpat',
                                    param: Ext.JSON.encode(param)
                                },
                                async: false,
                                success: function (result, request) {
                                    var retobj = Ext.JSON.decode(result.responseText);
                                    var str = retobj.result;
                                    var wordpatcontent;
                                    var wordpatsequence;
                                    var wordpatretunvalue;
                                    if(str!=""&&str!=null){
                                        if(str.indexOf("#")!=-1){
                                            wordpatcontent  = str.split('#')[0].replace(/[\[\s+]\]/g,']');

                                            wordpatsequence  = str.split('#')[1];
                                            wordpatretunvalue  = str.split('#')[2];
                                        }else{
                                            wordpatcontent=str;
                                        }
                                    }
                                    Ext.getCmp('s_wordpat').setValue(wordpatcontent);
                                    if(wordpatsequence=="有序"){
                                        Ext.getCmp('s_sequence').setValue(true);
                                    }else{
                                        Ext.getCmp('s_sequence').setValue(false);
                                    }
                                    //Ext.getCmp('s_returnValue').setValue(wordpatretunvalue);
                                },
                                failure: function (result, request) {
                                    Ext.MessageBox.alert('提示信息', '请求数据失败！');
                                }
                            });
                        }
                    }
                },
                {
                    xtype: 'textfield',
                    x: 30,
                    y: 40,
                    width: 300,
                    id: 's_question',
                    fieldLabel: '问题',
                    labelWidth: 60
                },
                {
                    xtype: 'combobox',
                    x: 350,
                    y: 40,
                    id: 's_cbChannel',
                    width: 140,
                    fieldLabel: '渠道',
                    labelWidth: 40,
                    value: '基金',
                    readOnly: true,
                    editable: false
                },
                {
                    xtype: 'textareafield',
                    x: 30,
                    y: 90,
                    height:110,
                    width: 580,
                    id: 's_wordpat',
                    fieldLabel: '模板',
                    labelWidth: 60
                },
                {
                    xtype: 'checkboxfield',
                    x: 30,
                    y: 210,
                    padding: 4,
                    id: 's_sequence',
                    fieldLabel: '',
                    boxLabel: '要求词条有序'
                },
                {
                    xtype: 'textfield',
                    x: 30,
                    y: 260,
                    width: 430,
                    fieldLabel: '抽取信息1',
                    labelWidth: 70,
                    name: 's_returnValueName',
                    id: 's_returnValue'
                },
                {
                    xtype: 'button',
                    x: 470,
                    y: 260,
                    width: 25,
                    icon: '../Images/add1.jpg',
                    text: '',
                    listeners: {
                        click: function(image) {
                            var s_textareaWordpat=Ext.getCmp("s_wordpat");
                            var s_wordpat=Ext.String.trim(s_textareaWordpat.getValue());
                            if(s_wordpat==""){
                                Ext.MessageBox.alert("提示消息", "请填写模板！");
                                return false;
                            }
                            //动态添加文本框
                            n++;
                            h=h+25;
                            var fd = new Ext.form.TextField({
                                name: 's_returnValueName',
                                fieldLabel: '抽取信息' + n,
                                labelWidth: 70,
                                x: 30,
                                y: h,
                                width: 430
                            });

                            var fb = new Ext.Button({
                                x: 470,
                                y: h,
                                width: 30,
                                icon: '../Images/sub1.jpg',
                                text: '',
                                listeners: {
                                    click:function(image) {
                                        win.remove(fb,false);
                                        win.remove(fd,false);
                                        fd.destroy();
                                        fb.destroy();
                                        win.doLayout();
                                    }
                                }
                            });
                            win.items.add(win.items.getCount(), fd);
                            win.doLayout();
                        }
                    }
                },
                {
                    xtype: 'button',
                    x: 530,
                    y: 260,
                    width: 60,
                    text: '保存',
                    listeners: {
                        click:function(button, e, eOpts) {


                            //判断是否是流程图页面添加词模
                            if( next_abs_names!=""&& queryorresponse=="应答"){

                                 var win2 = Ext.create('Ext.window.Window', {
                x:190,
                y:140,
                height: 283,
                width: 526,
                layout: 'fit',
                //如果不允许窗体被拖拽，加上下面这句
                draggable: true,
                maximizable : false,// 最大化控制 值为true时可以最大化窗体
                modal:true,//背景变灰不可编辑
                autoScroll : true,
                layout: {
                    type: 'absolute'
                },
                title:'请选择后续节点',
                         items: [
                            {
                                xtype: 'radiogroup',
                                x: 10,
                                y: 50,
                                height: 200,
                                id: 'nextabs',
                                style: 'margin-left:10px',
                                width: 490,
                                autoScroll: true,
                                fieldLabel: '节点名称',
                                layout: {
                                    align: 'stretch',
                                    type: 'vbox'
                                },
                                listeners: {
                                    beforerender:
                                        function(component, eOpts) {
                                            //加载节点开始
                                            raabs = Ext.getCmp('nextabs');
                                            var item ;
                                            var next_abs_namessarry = next_abs_names.split('$_$');
                                            for(var i=0;i<next_abs_namessarry.length;i++){
                                                if(i==0){
                                                    item =  new Ext.form.Radio({boxLabel:next_abs_namessarry[i],name:'radio2',checked:true});
                                                }else{
                                                  item =  new Ext.form.Radio({boxLabel:next_abs_namessarry[i],name:'radio2'});
                                                }
                                                raabs.items.add(item);
                                            }
                                            //加载节点结束
                                        }
                                }
                            },
                            {
                                xtype: 'button',
                                x: 430,
                                y: 220,
                                id: 'ok',
                                width: 60,
                                text: '确定',
                                listeners: {
                                    click:function(button, e, eOpts) {

                            //简单词模添加开始
                            var wordpat;
                            var question;
                            var returnValues=[];
                            var arry =[];
                            var returnValue;
                            var s_sequence;

                            var textareaWordpat=Ext.getCmp("s_wordpat");
                            var textareaQuestiont=Ext.getCmp("s_question");
                            var checkboxSequence = Ext.getCmp("s_sequence");
                            wordpat=Ext.String.trim(textareaWordpat.getValue()).replace(new RegExp(' ','g'),'');
                            question = Ext.String.trim(textareaQuestiont.getValue());
                            s_sequence = checkboxSequence.getValue();
                            arry =   document.getElementsByName("s_returnValueName") ;
                            for (var i=0;i<arry.length;i++){
                                returnValue = arry[i].value;
                                if(returnValue!=""&& returnValue!=null){
                                    //returnValues.push(Ext.String.trim(returnValue));
                                    returnValues.push(returnValue.replace(new RegExp(' ','g'),''));
                                }
                            }


        if(wordpattypename!="等于词模"&& wordpattypename=="普通词模"){

            if(simplewordpat.indexOf("类-")!=-1&&simplewordpat.indexOf("类*")==-1){
             Ext.MessageBox.alert("提示消息", "请确认词模格式是否和词模类型一致");
                return false;
            }

        }

        if(wordpattypename =="等于词模"){
            if(simplewordpat.indexOf("类-")==-1){
            Ext.MessageBox.alert("提示消息", "请确认词模格式是否和词模类型一致");
                return false;
            }else{
                if(simplewordpat.indexOf("类*")!=-1){
                    Ext.MessageBox.alert("提示消息", "请确认词模格式是否和词模类型一致");
                return false;
                }
            }
        }

        if(wordpattypename == "等于词模"){
        				wordpattype="1";
        			}
        			else if (wordpattypename == "排除词模") {
        				wordpattype="2";
        			} else if (wordpattypename =="选择词模") {
        				wordpattype="3";
        			} else if (wordpattypename == "特征词模") {
        				wordpattype="4";
                    }else{
                        wordpattype="0";
                    }




                            if(wordpat==""&&question==""){
                                Ext.MessageBox.alert("提示消息", "请填写问题或模板！");
                                return false;
                            }else if(wordpat.indexOf("~")!=-1){
                              Ext.MessageBox.alert("提示消息", "模板中有非法字符 ~ 存在");
                              return false;
                             }else if(wordpat.indexOf("+")!=-1){
                             Ext.MessageBox.alert("提示消息", "模板中有非法字符 + 存在");
                             return false;
                             }
                             else if(wordpat!=""&&returnValues.length==0){
                                Ext.MessageBox.alert("提示消息", "请填写抽取信息！");
                                return false;
                            }


                              if(wordpattypename=="选择词模"){
                              wordpat = "++*"+wordpat;
                             }else if(wordpattypename=="排除词模"){
                              wordpat = "~*"+wordpat;
                              }else if(wordpattypename=="特征词模"){
                              wordpat = "+*"+wordpat;
                             }


                            var param={};
                            param["cityids"]=cityids;
                            param["brand"]=brand;
                            param["service"]=service;
                            param["topic"]=topic;
                            param["_abstract"]=_abstract;
                            param["kbdataids"] = kbdataids;

                            param["_wordpat"]=wordpat;//简单词模
                            param["question"]=question;//相似问题
                            param["city"]=city;
                            param["autosendswitch"]="0";
                            param["oldcity"]=oldcity;
                            param["oldwordpat"]=oldwordpat;
                            param["wordpattype"]=wordpattype;
                            param["returnValues"]=returnValues;//返回值数组
                            param["s_sequence"] =  s_sequence; //是否有序
                            param["container"]=container;//业务所属

                            //流程图页面参数
                            param["abs_name"]=abs_name;
                            param["pre_abs_name"]=pre_abs_name;
                            param["chartaction"]=chartaction;
                            param["queryorresponse"]=queryorresponse;



                            var raabsnames = raabs.items.getCount();
                            for(var i=0;i<raabsnames;i++){
                               if (raabs.items.items[i].checked) {
                                  param["next_abs_name"]=raabs.items.items[i].boxLabel;
                                  }
                                }


                            //调用Ajax方法，同步请求获取数据
                            Ext.Ajax.request({
                                url: '../wordpat.action',
                                method: 'post',
                                params: {
                                    action:"simpleInsert",
                                    param: Ext.JSON.encode(param)
                                },
                                async: false, //同步请求数据
                                //获取数据成功
                                success: function (result, request) {
                                    var retobj = Ext.JSON.decode(result.responseText);
                                    Ext.MessageBox.alert('保存结果', retobj.checkInfo);
                                    if(editstatus=="1111"){
                                        if(retobj.checkInfo=='更新成功！'){
                                            var selRecords = Ext.getCmp("gridpanelQueryResult").getSelectionModel().getSelection();
                                            var str = wordpat;
                                            var autosendswitch1;
                                            autosendswitch1="关";
                                            var str1 = city;
                                            var str2 = autosendswitch1;
                                            selRecords[0].set('city',str1);
                                            selRecords[0].set('wordpat',str);
                                            selRecords[0].set('autosendswitch',str2);
                                            var ci = city.split(',');
                                            selRecords[0].set('number',ci.length);
                                            selRecords[0].raw.wordpat = wordpat;
                                            selRecords[0].raw.city = city;
                                            oldwordpat = wordpat;
                                            selRecords[0].raw.autosendswitch = "0";
                                            selRecords[0].commit();}else{
                                        }
                                    }else{
                                        var gridpanelQueryResult = Ext.getCmp('gridpanelQueryResult');
                                        var ToolBar = Ext.getCmp("ToolBar");
                                        var page = ToolBar.store.currentPage;
                                        gridpanelQueryResult.store.loadPage(page);
                                        if(retobj.checkInfo=="插入成功!"||retobj.checkInfo=="相似问题插入成功!"){
                                            win2.close();
                                             win.close();
                                        }
                                    }
                                },
                                //获取数据失败
                                failure: function (result, request) {
                                    Ext.MessageBox.alert('系统异常', '请求数据失败！');
                                }
                            });
                            //简单词模添加结束



                                    }
                                }
                            },
                             {
                                 xtype: 'button',
                                 x: 350,
                                 y: 220,
                                 width: 60,
                                 text: '取消',
                                 listeners: {
                                     click:function(button, e, eOpts) {
                                         win2.close();
                                     }
                                 }
                             }
                         ]
                });
            win2.show();

                            }else{


                            //简单词模添加开始
                            var wordpat;
                            var question;
                            var returnValues=[];
                            var arry =[];
                            var returnValue;
                            var s_sequence;

                            var textareaWordpat=Ext.getCmp("s_wordpat");
                            var textareaQuestiont=Ext.getCmp("s_question");
                            var checkboxSequence = Ext.getCmp("s_sequence");
                            wordpat=Ext.String.trim(textareaWordpat.getValue()).replace(new RegExp(' ','g'),'');
                            question = Ext.String.trim(textareaQuestiont.getValue());
                            s_sequence = checkboxSequence.getValue();
                            arry =   document.getElementsByName("s_returnValueName") ;
                            for (var i=0;i<arry.length;i++){
                                returnValue = arry[i].value;
                                if(returnValue!=""&& returnValue!=null){
                                    //returnValues.push(Ext.String.trim(returnValue));
                                    returnValues.push(returnValue.replace(new RegExp(' ','g'),''));
                                }
                            }





                            if(wordpat==""&&question==""){
                                Ext.MessageBox.alert("提示消息", "请填写问题或模板！");
                                return false;
                            }else if(wordpat.indexOf("~")!=-1){
                              Ext.MessageBox.alert("提示消息", "模板中有非法字符 ~ 存在");
                              return false;
                             }else if(wordpat.indexOf("+")!=-1){
                             Ext.MessageBox.alert("提示消息", "模板中有非法字符 + 存在");
                             return false;
                             }
                             else if(wordpat!=""&&returnValues.length==0){
                                Ext.MessageBox.alert("提示消息", "请填写抽取信息！");
                                return false;
                            }


           if(wordpattypename!="等于词模"&&wordpat.indexOf("类-")!=-1){
            Ext.MessageBox.alert("提示消息", "请确认词模格式是否和词模类型一致");
                return false;
        }

        if(wordpattypename =="等于词模"&&wordpat.indexOf("类-")==-1){
            Ext.MessageBox.alert("提示消息", "请确认词模格式是否和词模类型一致");
                return false;
        }

        if(wordpattypename == "等于词模"){
        				wordpattype="1";
        			}
        			else if (wordpattypename == "排除词模") {
        				wordpattype="2";
        			} else if (wordpattypename =="选择词模") {
        				wordpattype="3";
        			} else if (wordpattypename == "特征词模") {
        				wordpattype="4";
                    }else{
                        wordpattype="0";
                    }







                                  if(wordpattypename=="选择词模"){
                              wordpat = "++*"+wordpat;
                             }else if(wordpattypename=="排除词模"){
                              wordpat = "~*"+wordpat;
                              }else if(wordpattypename=="特征词模"){
                              wordpat = "+*"+wordpat;
                             }

                            var param={};
                            param["cityids"]=cityids;
                            param["brand"]=brand;
                            param["service"]=service;
                            param["topic"]=topic;
                            param["_abstract"]=_abstract;
                            param["kbdataids"] = kbdataids;

                            param["_wordpat"]=wordpat;//简单词模
                            param["question"]=question;//相似问题
                            param["city"]=city;
                            param["autosendswitch"]="0";
                            param["oldcity"]=oldcity;
                            param["oldwordpat"]=oldwordpat;
                            param["wordpattype"]=wordpattype;
                            param["returnValues"]=returnValues;//返回值数组
                            param["s_sequence"] =  s_sequence; //是否有序
                            param["container"]=container;//业务所属


                            param["abs_name"]=abs_name;
                            param["pre_abs_name"]=pre_abs_name;
                            param["chartaction"]=chartaction;
                            param["queryorresponse"]=queryorresponse;
                            param["next_abs_names"]=next_abs_names;

                            //调用Ajax方法，同步请求获取数据
                            Ext.Ajax.request({
                                url: '../wordpat.action',
                                method: 'post',
                                params: {
                                    action:"simpleInsert",
                                    param: Ext.JSON.encode(param)
                                },
                                async: false, //同步请求数据
                                //获取数据成功
                                success: function (result, request) {
                                    var retobj = Ext.JSON.decode(result.responseText);
                                    Ext.MessageBox.alert('保存结果', retobj.checkInfo);
                                    if(editstatus=="1111"){
                                        if(retobj.checkInfo=='更新成功！'){
                                            var selRecords = Ext.getCmp("gridpanelQueryResult").getSelectionModel().getSelection();
                                            var str = wordpat;
                                            var autosendswitch1;
                                            autosendswitch1="关";
                                            var str1 = city;
                                            var str2 = autosendswitch1;
                                            selRecords[0].set('city',str1);
                                            selRecords[0].set('wordpat',str);
                                            selRecords[0].set('autosendswitch',str2);
                                            var ci = city.split(',');
                                            selRecords[0].set('number',ci.length);
                                            selRecords[0].raw.wordpat = wordpat;
                                            selRecords[0].raw.city = city;
                                            oldwordpat = wordpat;
                                            selRecords[0].raw.autosendswitch = "0";
                                            selRecords[0].commit();}else{
                                        }
                                    }else{
                                        var gridpanelQueryResult = Ext.getCmp('gridpanelQueryResult');
                                        var ToolBar = Ext.getCmp("ToolBar");
                                        var page = ToolBar.store.currentPage;
                                        gridpanelQueryResult.store.loadPage(page);
                                        if(retobj.checkInfo=="插入成功!"||retobj.checkInfo=="相似问题插入成功!"){
                                            win.close();
                                        }
                                    }
                                },
                                //获取数据失败
                                failure: function (result, request) {
                                    Ext.MessageBox.alert('系统异常', '请求数据失败！');
                                }
                            });
                            //简单词模添加结束
                            }


                        }
                    }
                }
            ]
        });
        win.show();
    }

});